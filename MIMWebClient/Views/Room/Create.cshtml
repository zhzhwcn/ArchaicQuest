@model ToPage
@{
    ViewBag.Title = "创建";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="container">
        <div class="row">

            <h4>Create Room</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.region)

                    @Html.EditorFor(model => model.roomModel.region, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.region, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.area)
                    @Html.EditorFor(model => model.roomModel.area, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.area, "", new { @class = "text-danger" })
                </div>


                <div class="col-md-4">
                    @Html.LabelFor(model => model.roomModel.areaId)
                    @Html.EditorFor(model => model.roomModel.areaId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.areaId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">

            <div class="form-group">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.roomModel.title)
                    @Html.EditorFor(model => model.roomModel.title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.roomModel.title, "", new { @class = "text-danger" })

                    @Html.LabelFor(model => model.roomModel.description, htmlAttributes: new { @class = "control-label" })
                    @Html.TextAreaFor(model => model.roomModel.description, 10, 20, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.roomModel.description, "", new { @class = "text-danger" })

                    @Html.LabelFor(model => model.roomModel.terrain)
                    @Html.EnumDropDownListFor(model => model.roomModel.terrain, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.roomModel.terrain, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-12">

                    <h2 class="page-header">Keywords</h2>
                    <p>This is to describe objects in the room description so players can examine the ornament or smell the cookies etc. If an Item is important add it as an item so player can interact with it.</p>

                    <a id="js-addKeyword-btn" href="javascript:void(0)" class="btn btn-sm btn-success">Add new keyword</a>
                    <br />
                    <br />
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>look</th>
                                <th>examine</th>
                                <th>smell</th>
                                <th>taste</th>
                                <th>touch</th>
                            </tr>
                        </thead>
                        <tbody id="js-keyword-table"></tbody>
                    </table>

                    <div id="js-addKeyword" style="display: none;">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.roomKeywords.name)
                            @Html.EditorFor(model => model.roomKeywords.name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.roomKeywords.name, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.roomKeywords.look)
                            @Html.TextAreaFor(model => model.roomKeywords.look, 10, 20, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.roomKeywords.look, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.roomKeywords.examine)
                            @Html.TextAreaFor(model => model.roomKeywords.examine, 10, 20, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.roomKeywords.examine, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.roomKeywords.smell)
                            @Html.TextAreaFor(model => model.roomKeywords.smell, 10, 20, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.roomKeywords.smell, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.roomKeywords.taste)
                            @Html.TextAreaFor(model => model.roomKeywords.taste, 10, 20, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.roomKeywords.taste, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.roomKeywords.touch)
                            @Html.TextAreaFor(model => model.roomKeywords.touch, 10, 20, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.roomKeywords.touch, "", new { @class = "text-danger" })
                        </div>
                        <a id="js-addKeyword-save" href="javascript:void(0)" class="btn btn-success">Add keyword</a>
                    </div>
                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <h2 class="page-header">Exits</h2>
                <p>Exits must have a name and can only be North, East, South, West, Up and Down. Double Check Region and Area Spelling. AreaId should be generated dynamically.</p>

                <a id="js-addExit-btn" href="javascript:void(0)" class="btn btn-sm btn-success">Add new exit</a>
                <br />
                <br />
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Region</th>
                            <th>Area</th>
                            <th>AreaId</th>
                        </tr>
                    </thead>
                    <tbody id="js-exit-table"></tbody>
                </table>

            </div>
        </div>
        <div class="row">
            <div id="js-addExit" style="display:none;">

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.exitModel.name)
                        @Html.EditorFor(model => model.exitModel.name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.exitModel.name, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.exitModel.region, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.exitModel.region, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.exitModel.region, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.exitModel.area)
                        @Html.EditorFor(model => model.exitModel.area, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.exitModel.area, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-3">
                        @Html.LabelFor(model => model.exitModel.areaId)
                        @Html.EditorFor(model => model.exitModel.areaId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.exitModel.areaId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.exitModel.locked)
                        @Html.CheckBoxFor(model => model.exitModel.locked)
                        @Html.ValidationMessageFor(model => model.exitModel.locked, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(model => model.exitModel.keyId)
                        @Html.EditorFor(model => model.exitModel.keyId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.exitModel.keyId, "", new { @class = "text-danger" })
                    </div>

                </div>


                <a id="js-addExit-save" href="javascript:void(0)" class="btn btn-success">Add exit</a>
            </div>
        </div>

        <div class="row">

            <h2 class="page-header">Mobs</h2>
            <p>Here we add mobs</p>

            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Gender</th>
                        <th>Race</th>
                        <th>Class</th>
                        <th>Stats</th>
                        <th>Level</th>
                        <th>Alignment</th>
                        <th>HP</th>
                        <th>Mana</th>
                        <th>Movs</th>
                        <th>Hit / Dam</th>
                        <th>Status</th>
                        <th>Gold</th>
                        <th>Silver</th>
                        <th>Copper</th>
                        <th>Description</th>
                        <th>Inventory</th>
                    </tr>
                </thead>
                <tbody id="js-mob-table"></tbody>
            </table>
            <div id="js-toggle-mob" style="display: none;">
                <div class="form-group">
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Name)
                        @Html.EditorFor(model => model.mobModel.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Gender)
                        @Html.EditorFor(model => model.mobModel.Gender, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Gender, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Race)
                        @Html.EditorFor(model => model.mobModel.Race, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Race, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.SelectedClass)
                        @Html.EditorFor(model => model.mobModel.SelectedClass, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.SelectedClass, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Description)
                        @Html.TextAreaFor(model => model.mobModel.Description, 10, 20, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.mobModel.Description, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Strength)
                        @Html.EditorFor(model => model.mobModel.Strength, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Strength, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Dexterity)
                        @Html.EditorFor(model => model.mobModel.Dexterity, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Dexterity, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Constitution)
                        @Html.EditorFor(model => model.mobModel.Constitution, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Constitution, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Wisdom)
                        @Html.EditorFor(model => model.mobModel.Wisdom, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Wisdom, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Intelligence)
                        @Html.EditorFor(model => model.mobModel.Intelligence, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Intelligence, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.mobModel.Charisma)
                        @Html.EditorFor(model => model.mobModel.Charisma, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Charisma, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Level)
                        @Html.EditorFor(model => model.mobModel.Level, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Level, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.AlignmentScore)
                        @Html.EditorFor(model => model.mobModel.AlignmentScore, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.AlignmentScore, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.MaxHitPoints)
                        @Html.EditorFor(model => model.mobModel.MaxHitPoints, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.MaxHitPoints, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.MaxManaPoints)
                        @Html.EditorFor(model => model.mobModel.MaxManaPoints, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.MaxManaPoints, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.MaxMovePoints)
                        @Html.EditorFor(model => model.mobModel.MaxMovePoints, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.MaxMovePoints, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.HitRoll)
                        @Html.EditorFor(model => model.mobModel.HitRoll, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.HitRoll, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.DamRoll)
                        @Html.EditorFor(model => model.mobModel.DamRoll, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.DamRoll, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Status)
                        @Html.EnumDropDownListFor(model => model.mobModel.Status, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.mobModel.Status, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Gold)
                        @Html.EditorFor(model => model.mobModel.Gold, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Gold, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Silver)
                        @Html.EditorFor(model => model.mobModel.Silver, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Silver, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(model => model.mobModel.Copper)
                        @Html.EditorFor(model => model.mobModel.Copper, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.mobModel.Copper, "", new { @class = "text-danger" })
                    </div>

                </div>
                </div>
                <a id="js-addMob-btn" href="javascript:void(0)" class="btn btn-sm btn-success">Add new mob</a>
            <a href="javascript:void(0)" id="js-addMob-save">Add Mob</a>
            </div>
                    <div class="row">
                        <!-- ITEM -->
                        <h2 class="heading">Add Items</h2>
                        <hr />
                        If you want an item to be in the room but hidden. check the don't display box. but remmeber to inlude the item in the description for observant players. for containers, select the container and add to container button instead of room.

                        <br />
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Dam min</th>
                                        <th>Dam Max</th>
                                        <th>Dam Roll</th>
                                        <th>Attack Type</th>
                                        <th>Weapon Type</th>
                                        <th>EQ Slot</th>
                                        <th>Min Usage lvl</th>
                                        <th>Equipable</th>
                                        <th>Item Flags</th>
                                        <th>Dam Type</th>
                                        <th>Look</th>
                                        <th>Examine</th>
                                        <th>Room</th>
                                        <th>Taste</th>
                                        <th>Touch</th>
                                        <th>Smell</th>
                                    </tr>
                                </thead>
                                <tbody id="js-item-table"></tbody>
                            </table>
                        </div>

                        <br />
                        <br />
                        <a href="javascript:void(0)" id="js-addItem-btn" class="btn btn-success">Add a new Item</a>
                    </div>


                    <div id="js-toggle-item" style="display: none;">

                        <!-- Select ITem-->
                        <div class="form-group">
                            <div class="col-md-12">
                                <label for="listbox">Select Item</label>

                                <select name="listbox" id="listbox" class="form-control">
                                    <option>Select item to add</option>
                                    @foreach (var item in Model.itemSelect)
                                    {

                                        <option value="@item.name">
                                            @item.name
                                        </option>
                                    }
                                </select>

                                <a href="javascript:void(0)">Add Item</a>

                            </div>
                        </div>

                        <div class="row">
                            <!-- item name -->
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.itemModel.name)

                                    @Html.EditorFor(model => model.itemModel.name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.itemModel.name, "", new { @class = "text-danger" })


                                    <!-- item type -->
                                    //Always an object
                                    @Html.LabelFor(model => model.itemModel.type)

                                    @Html.EnumDropDownListFor(model => model.itemModel.type, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.itemModel.type, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <!-- If weapon show -->

                        <div class="row">
                            <!-- item dam min -->
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.stats.damMin)

                                    @Html.EditorFor(model => model.itemModel.stats.damMin, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                                    @Html.ValidationMessageFor(model => model.itemModel.stats.damMin, "", new { @class = "text-danger" })
                                </div>


                                <!-- item dam max -->
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.stats.damMax)

                                    @Html.EditorFor(model => model.itemModel.stats.damMax, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                                    @Html.ValidationMessageFor(model => model.itemModel.stats.damMax, "", new { @class = "text-danger" })
                                </div>


                                <!-- item dam roll -->
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.stats.damRoll)
                                    @Html.EditorFor(model => model.itemModel.stats.damRoll, new { htmlAttributes = new { @class = "form-control", @value = 0 } })
                                    @Html.ValidationMessageFor(model => model.itemModel.stats.damRoll, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- item attack type -->
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.attackType)

                                    @Html.EnumDropDownListFor(model => model.itemModel.attackType, "- Please select attack Type -", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.itemModel.attackType, "", new { @class = "text-danger" })
                                </div>


                                <!-- item weapon type -->
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.weaponType)

                                    @Html.EnumDropDownListFor(model => model.itemModel.weaponType, "- Please select attack Type -", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.itemModel.weaponType, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.slot)

                                    @Html.EnumDropDownListFor(model => model.itemModel.eqSlot, "- Please select equipment slot -", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.itemModel.slot, "", new { @class = "text-danger" })


                                </div>
                            </div>
                        </div>
                        <!-- /If weapon show -->

                        <div class="row">
                            <!-- item min usage level -->
                            <div class="form-group">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.stats.minUsageLevel)

                                    @Html.EditorFor(model => model.itemModel.stats.minUsageLevel, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.itemModel.stats.minUsageLevel, "", new { @class = "text-danger" })
                                </div>


                                <!-- item Equipable -->

                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.equipable)

                                    @Html.CheckBoxFor(model => model.itemModel.equipable, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.itemModel.equipable, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.itemModel.container)

                                    @Html.CheckBoxFor(model => model.itemModel.container, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.itemModel.container, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- item flags -->
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.itemModel.itemFlags)
                                    <hr />
                                    <div class="row">
                                        @{

                                            foreach (var item in Model.itemModel.itemFlags)
                                            {
                                                <div class="col-xs-3">
                                                    <div class="checkbox">
                                                        <input class="js-itemFlags" type="checkbox" name="SelectedSources" value="@item">@item
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <!-- item damage type -->
                            <div class="form-group">
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.itemModel.damageType)
                                    <hr />
                                    <div class="row">
                                        @{

                                            foreach (var item in Model.itemModel.damageType)
                                            {
                                                <div class="col-xs-3">
                                                    <div class="checkbox">
                                                        <input id="stats_@item" class="js-damTypeFlags" type="checkbox" name="SelectedSources" value="@item">@item
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>


                        <!-- descriptions -->
                        <!-- item description look -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.look)

                                @Html.TextAreaFor(model => model.itemModel.description.look, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.look, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- item description examine -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.exam)

                                @Html.TextAreaFor(model => model.itemModel.description.exam, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.exam, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- item description room -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.room)

                                @Html.TextAreaFor(model => model.itemModel.description.room, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.room, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- item description taste -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.taste)

                                @Html.TextAreaFor(model => model.itemModel.description.taste, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.taste, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- item description touch -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.touch)

                                @Html.TextAreaFor(model => model.itemModel.description.touch, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.touch, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <!-- item description smell -->
                        <div class="form-group">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.itemModel.description.smell)

                                @Html.TextAreaFor(model => model.itemModel.description.smell, 5, 5, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.itemModel.description.smell, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        Add Item to:
                        <select id="js-add-item-to-where">
                            <option value="room">Room</option>
                            <!-- mobs, corpses, containers -->
                        </select>

                        <a id="js-AddItem" href="javascript:void(0)">Add Item</a>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                            <a href="#" id="js-add-room" class="btn btn-success">Add Room</a>
                        </div>
                    </div>
                </div>


                @Html.ActionLink("Back to List", "Index")
                @section Scripts {
                    @Scripts.Render("~/bundles/jqueryval")


                    <script>
                        $(function () {
                            console.log("Loaded");

                            //Add a new exit
                            $("#js-addKeyword-btn").click(function () {

                                console.log("keyword add button click");


                                $("#js-addKeyword").toggle();


                            });

                            window.keywordArray = [];

                            //add exit to array and to table
                            $("#js-addKeyword-save").click(function () {


                                var keywordData = {

                                    "name": $("#roomKeywords_name").val(),
                                    "look": $("#roomKeywords_look").val(),
                                    "examine": $("#roomKeywords_examine").val(),
                                    "smell": $("#roomKeywords_smell").val(),
                                    "taste": $("#roomKeywords_taste").val(),
                                    "touch": $("#roomKeywords_touch").val(),

                                }

                                keywordArray.push(keywordData);

                                var keywordRow = '<tr class="js-exit-row">' +
                                    '<td class="js-exit-name">' + keywordData.name + '</td>' +
                                    '<td class="js-exit-Region">' + keywordData.look + '</td>' +
                                    '<td class="js-exit-Area">' + keywordData.examine + '</td>' +
                                    '<td class="js-exit-AreaId">' + keywordData.smell + '</td>' +
                                    '<td class="js-exit-Area">' + keywordData.taste + '</td>' +
                                    '<td class="js-exit-AreaId">' + keywordData.touch + '</td>' +
                                    '' +
                                    '</tr>';


                                $("#js-keyword-table").append(keywordRow);

                                $("#js-addKeyword").hide();

                                //reset fields and hide Add exit section
                                $("#roomKeywords_name").val('');
                                $("#roomKeywords_look").val('');
                                $("#roomKeywords_examine").val('');
                                $("#roomKeywords_smell").val('');
                                $("#roomKeywords_taste").val('');
                                $("#roomKeywords_touch").val('');


                            });
                        });

                        //add a
                    </script>

<script>
                        $(function () {
                            console.log("Loaded");

                            //Add a new exit
                            $("#js-addMob-btn").click(function () {

                                console.log("keyword add button click");


                                $("#js-toggle-mob").toggle();


                            });

                            window.mobArray = [];

                            //add exit to array and to table
                            $("#js-addMob-save").click(function () {


                                var mobData = {

                                    "name": $("#mobModel_Name").val(),
                                    "gender": $("#mobModel_Gender").val(),
                                    "race": $("#mobModel_Race").val(),
                                    "class": $("#mobModel_SelectedClass").val(),
                                    "strength": $("#mobModel_Strength").val(),
                                    "dexterity": $("#mobModel_Dexterity").val(),
                                    "constitution": $("#mobModel_Constitution").val(),
                                    "wisdom": $("#mobModel_Wisdom").val(),
                                    "intelligence": $("#mobModel_Intelligence").val(),
                                    "charisma": $("#mobModel_Charisma").val(),
                                    "level": $("#mobModel_Level").val(),
                                    "alignment": $("#mobModel_AlignmentScore").val(),
                                    "hp": $("#mobModel_MaxHitPoints").val(),
                                    "mana": $("#mobModel_MaxManaPoints").val(),
                                    "moves": $("#mobModel_MaxMovePoints").val(),
                                    "hit": $("#mobModel_HitRoll").val(),
                                    "dam": $("#mobModel_DamRoll").val(),
                                    "status": $("#mobModel_Status").val(),
                                    "gold": $("#mobModel_Gold").val(),
                                    "silver": $("#mobModel_Silver").val(),
                                    "copper": $("#mobModel_Copper").val(),
                                    "inventory": [],
                                    "description":""

                                }

                                $("#js-add-item-to-where").append($('<option/>', {
                                    value: mobData.name,
                                    text: mobData.name
                                }));

                                mobArray.push(mobData);

                                var mobRow = '<tr>' +
                                    '<td class="">' + mobData.name + '</td>' +
                                    '<td class="">' + mobData.gender + '</td>' +
                                    '<td class="">' + mobData.race + '</td>' +
                                    '<td class="">' + mobData.class + '</td>' +
                                    '<td class="">' + "str: " + mobData.strength + " dex: " + mobData.dexterity
                                                    + " con: " + mobData.constitution + " wis: " + mobData.wisdom
                                                    + " int: " + mobData.intelligence + " cha: " + mobData.charisma
                                   + '</td>' + '<td class="">' + mobData.level + '</td>' +
                                 '<td class="">' + mobData.alignment + '</td>' +
                                 '<td class="">' + mobData.hp + '</td>' +
                                 '<td class="">' + mobData.mana + '</td>' +
                                 '<td class="">' + mobData.moves + '</td>' +
                                 '<td class="">' + mobData.hit +"/"+ mobData.dam  + '</td>' +
                                 '<td class="">' + mobData.status + '</td>' +
                                 '<td class="">' + mobData.gold + '</td>' +
                                 '<td class="">' + mobData.silver + '</td>' +
                                 '<td class="">' + mobData.copper + '</td>' +
                                    '</tr>';


                                $("#js-mob-table").append(mobRow);

                                $("#js-addMob").hide();

                                //reset fields and hide Add exit section
                                $("#mobModel_Name").val(''),
                                $("#mobModel_Gender").val('');
                                $("#mobModel_Race").val('');
                                $("#mobModel_SelectedClass").val('');
                                $("#mobModel_Strength").val('');
                                $("#mobModel_Dexterity").val('');
                                $("#mobModel_Constitution").val('');
                                $("#mobModel_Wisdom").val('');
                                $("#mobModel_Intelligence").val('');
                                $("#mobModel_Charisma").val('');
                                $("#mobModel_Level").val('');
                                $("#mobModel_AlignmentScore").val('');
                                $("#mobModel_MaxHitPoints").val('');
                                $("#mobModel_MaxManaPoints").val('');
                                $("#mobModel_MaxMovePoints").val('');
                                $("#mobModel_HitRoll").val('');
                                $("#mobModel_DamRoll").val('');
                                $("#mobModel_Status").val('');
                                $("#mobModel_Gold").val('');
                                $("#mobModel_Silver").val('');
                                $("#mobModel_Copper").val('');


                            });
                        });

                    
</script>

                    <script>
                        $(function () {
                            console.log("Loaded");

                            //Add a new exit
                            $("#js-addExit-btn").click(function () {

                                console.log("Exit add button click");
                                console.log("addExit is it visible: " + $('#js-addExit').is(":visible"));
                                //Show / hide hidden Exit fields

                                $("#js-addExit").toggle();


                            });

                            window.exitsArray = [];

                            //add exit to array and to table
                            $("#js-addExit-save").click(function () {


                                var exitData = {

                                    "name": $("#exitModel_name").val(),
                                    "areaId": $("#exitModel_areaId").val(),
                                    "area": $("#exitModel_area").val(),
                                    "region": $("#exitModel_region").val(),
                                    "keywords": null,
                                    "locked": $("#exitModel_locked").val(),
                                    "keyValue": null,
                                    "hidden": false,
                                    "location": null,
                                    "equipable": false,
                                    "slot": null,
                                    "actions": null,
                                    "description": null,
                                    "stats": null,
                                    "keyId": $("#exitModel.keyId").val(),

                                }

                                exitsArray.push(exitData);

                                var exitRow = '<tr class="js-exit-row"><td class="js-exit-name">' + exitData.name + '</td><td class="js-exit-Region">' + exitData.region + '</td><td class="js-exit-Area">' + exitData.area + '</td><td class="js-exit-AreaId">' + exitData.areaId + '</td></tr>';


                                $("#js-exit-table").append(exitRow);

                                $("#js-addExit").hide();

                                //reset fields and hide Add exit section
                                $("#exitModel_name").val('');
                                $("#exitModel_region").val('');
                                $("#exitModel_area").val('');
                                $("#exitModel_areaId").val('');


                            });
                        });

                        //add a
                    </script>

                    <script>

                        //Add a new exit
                        $("#js-addItem-btn").click(function () {

                            console.log("Exit add button click");
                            console.log("addExit is it visible: " + $('#js-addExit').is(":visible"));
                            //Show / hide hidden Exit fields

                            $("#js-toggle-item").toggle();


                        });

                        //add a new item
                        $("#js-AddItem").click(function () {

              
                            var itemFlagValues = $('.js-itemFlags:checked').map(function () {
                                return this.value;
                            }).get();

                            var itemDamTypeValues = $('.js-damTypeFlags:checked').map(function () {
                                return this.value;
                            }).get();

                            window.item = [];

                            var data = {
                                type: $("#itemModel_type").val(),
                                location: "room",
                                equipable: $("#itemModel_equipable").val(),
                                slot: $("#itemModel_eqSlot option:selected").val(),
                                name: $("#itemModel_name").val(),
                                container: $("#itemModel_container").val(),
                                actions: {
                                    wield: "wield"
                                },
                                description: {
                                    look: $("#itemModel_description_look").val(),
                                    exam: $("#itemModel_description_exam").val(),
                                    room: $("#itemModel_description_room").val(),
                                    taste: $("#itemModel_description_taste").val(),
                                    touch: $("#itemModel_description_touch").val(),
                                    smell: $("#itemModel_description_smell").val(),
                                },
                                stats: {
                                    damMin: $("#itemModel_stats_damMin").val(),
                                    damMax: $("#itemModel_stats_damMax").val(),
                                    damRoll: $("#itemModel_stats_damRoll").val(),
                                    minUsageLevel: $("#itemModel_stats_minUsageLevel").val(),
                                    worth: 0
                                },
                                containerItems: null,
                                itemFlags: itemFlagValues,
                                damageType: itemDamTypeValues
                            };

                            if (data.container == true) {

                                $("#js-add-item-to-where").append($('<option/>', {
                                    value: data.name,
                                    text: data.name
                                }));
                            }

                            //push item to container/ mob

                            var addItemToWhere = $("#js-add-item-to-where");

                            if (addItemToWhere.val() === "room") {
                                window.item.push(data);
                            }
                            else {
                                var mobArrayLen = mobArray.length;
                                var itemArrayLen = window.item.length;

                                for (var i = 0; i < mobArrayLen; i++) {
                                   
                                    if (mobArray[i].name === addItemToWhere.val()) {
                                        data.location = "Inventory";
                                        mobArray[i].inventory = data;
                                        return;
                                    }
 
                                }
                            }


                           
                            /*
                                Push item data to an array and display under added Items
                             */

                            $.ajax({
                                type: "POST",
                                url: "/Room/addItem",
                                content: "application/json; charset=utf-8",
                                dataType: "json",
                                data: data,
                                success: function (d) {

                                },
                                error: function (xhr, textStatus, errorThrown) {
                                    // TODO: Show error
                                },
                                complete: function () {


                                    var itemRow = "<tr><td>" + data.name + "</td>" +
                                        "<td>" + data.type + "</td>" +
                                        "<td>" + data.stats.damMin + "</td>" +
                                        "<td>" + data.stats.damMax + "</td>" +
                                        "<td>" + $("#itemModel_stats_damRoll").val() + "</td>" +
                                        "<td>" + $("#itemModel_attackType option:selected").text() + "</td>" +
                                        "<td>" + $("#itemModel_weaponType option:selected").text() + "</td>" +
                                        "<td>" + $("#itemModel_eqSlot option:selected").text() + "</td>" +
                                        "<td>" + $("#itemModel_stats_minUsageLevel").val() + "</td>" +
                                        "<td>" + data.equipable + "</td>" +
                                        "<td>" + itemFlagValues + "</td>" +
                                        "<td>" + itemDamTypeValues + "</td>" +
                                        "<td>" + data.description.look + "</td>" +
                                        "<td>" + data.description.exam + "</td>" +
                                        "<td>" + data.description.room + "</td>" +
                                        "<td>" + data.description.taste + "</td>" +
                                        "<td>" + data.description.touch + "</td>" +
                                        "<td>" + data.description.smell + "</td></tr>";

                                    $("#js-item-table").append(itemRow);
                                }
                            });

                        });
                    </script>

                    <script>
                        $("#js-add-room").click(function () {
                         
                            var roomModel = {
                                "roomModel": {
                                    "region": $('#roomModel_region').val(),
                                    "area": $('#roomModel_area').val(),
                                    "areaId": $('#roomModel_areaId').val(),
                                    "clean": true,
                                    "modified": "",
                                    "title": $('#roomModel_title').val(),
                                    "description": $('#roomModel_description').val(),
                                    "terrain": $('#roomModel.terrain').val(),
                                    "keywords": keywordArray,
                                    "exits": window.exitsArray,
                                    "players": [],
                                    "fighting": [],
                                    "mobs": mobArray,
                                    "items": window.item,
                                    "corpses": []
                                }
                            }
                            console.log(roomModel)
                            console.log(JSON.stringify(roomModel))

                            $.ajax({
                                type: "POST",
                                url: "/Room/create",
                                content: "application/json; charset=utf-8",
                                dataType: "json",
                                data: roomModel,
                                success: function (d) {

                                },
                                error: function (xhr, textStatus, errorThrown) {
                                    // TODO: Show error
                                },
                                complete: function () {


                                }
                            });

                        });
                    </script>
                }


                }
